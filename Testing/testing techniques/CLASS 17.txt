Funtional testing:
------------------
->Test New Features (using test cases)
-> Test Defects  (ReTesting )
-> Before Regression perform sanity + smoke
-> Regression  [just before the delivery]
-> Non Funtional Testing.
-> User Acceptance Testing  (customer)

coverage/gudelines under funtional testing or 
testing techniques
------------------------------------------
 
obj properties covearge
input domain coverage (BVA, ECP)
error handling/coverage
calculation/manipulation testing
links existance & links execution
cookies and sessions -> NA
I18N testing (currancy change)
localization testing (testing particular location 
ex: currancy change
    chnage the date + time format
	collect id (voter id or ssn)
	

  
a)Object Properties testing:
->Every object has certain properties.
ex: in a web page textbox , password field, state dropdown.

textbox is an object -> enabled, disabled , size , displayed,onchange, focus


password is object -> we type should not be visible + if we chose to show password should show

state dropdown obj -> if we change state then city dropdown chnages...
city dropdown obj ->

-> what values are allowed, what values are not allowed, 

b)Error handling/coverage testing:
negative scenarios testing.
-> tester has to provide  all possible invalid data and check how the application is behaving for every page.
-> test the error message displayed to customer.
-> Test the expected erorr message has to be displayed on the screen.
-> test the app should give meaningful message.
ex: 
1."Please enter valid password"   
--Not a meaning error message
2."Password should be min 5 chars and max 10 chars".
-- meaningfull message.

[Provide invalid data and test how app responds  +   what is the message + is the message meaningful?]
	
validate the erorr message shown by the app is as expected
error when db is down , when app is crashed.
error with invalid input or input flow then app should throw meaningful messages.
only for negative scenario.
ex: instaed of message "invaid username " use "username has to be minium 6 ands max 8 chars".

	
	
c)calculation /manipulation testing:
------------------------------------
 scenarios: bil generation , transaction , financial invoice.
  
ex:
1.debit + credit 
check the final bal for both accounts.
USER1 : 6000
user2 : 9000
user1 transfers 1000 to user2 
USER1 : 5000
user2 : 10000
database testing is required.


2. add products to cart
in final bill the total amount to be paid = sum of prices of all products 
+ additionaly apply discount + taxes  ===> final price.
  
  if bill is > 5000 then give a discount of 500 rupees:
a) when bill < 5000
b) when bill >=5000
  

ex: financial , banking , ecommerce.


d)Links coverage:
------------------
-applicable for the web applications.
- check if the expected links are displayed on the page.
- check if the links are displayed in the expcted layout/position.
- check invalid links should not links or existing links are not broken
ex: on home we would expect login + register 

- check if the links are working ? navigating to the target page as expected??
- Links can be internal or external .
app has links as agreed by business.




Input domain testing:
----------------------
during ID testing , tester has to validate the data provided to the application w.r.t. value and length.
EX:
uname allows only alphabets   [value ]
uname size is 6 to 8       [lenth] , range 

we should test both +ve and -ve.
for +ve => app should allow
for -ver => app shouldnot allow


we have two techniques for testing above requirement.
 = > Equalance class partition   - Value check
 = > Boundary value analysis.    - Length check

focus is on the coverage but on the number of test cases.



BVA for username : refer the diagram
ECP for username : refer the diagram



e)Boundary Value analysis:[BVA]- LENGTH/range
------------------------------
Boundary value analysis is based on testing at the boundaries between partitions. 
It includes maximum, minimum, inside or outside boundaries, typical values and error values.


ex: username should be between 6 chars and max 10 chars.
BVA is used when the requirement has boundaries for testing.
testcases:

testcases for range:
min-1 , min , min+1
max-1, max, max+1
  
min =6
max= 10  
  
test caes for length:
length-1 , length , length


  Username(6-10)    status
  ---------        --------
1. 5                  F   
2. 6                  P
3. 7                  P
4. 9                  P
5. 10                 P
6. 11                 F 

 f)Equivalence class partitioning (ECP):- Value
---------------------------------

 Equivalent Class Partitioning allows you to divide set of test condition into a partition 
 which should be considered the same.
 This software testing method divides the input domain of a program into classes of data from which test cases should be designed.
 
ex: 1.mobile num should be exactly 10 digits
10     - Valid  -> 9090909090
9 , 11 - Invalid -> 999999999 & 90909090901

 
2.username allows only alphabets only capitals allowed.

1. only alphabets lower case   - Negative Test case 
2. only alphabets upper case   - +v2 Test case 
3. only digits                 - Negative Test case  
4.special chars                - Negative Test case 
  

g)decision table based testing
-------------------------------
This software testing technique is used for Reqirements which respond to a combination of inputs or events.
used when we have multi events/combinations in a requirement.

If there are large input set of combinations, then divide it into smaller subsets which are helpful for managing a decision table.
  
Following are steps to create a decision table:
------------------------------------------------------
Enlist the inputs in rows
Enter all the rules in the column
Fill the table with the different combination of inputs
In the last row, note down the output against the input combination.
 
 
-> ex: login page 
Un has to be  10 chars
pwd has to be 8 chars
un & pwd if both are valid then login is success.

SYNTAX CORRECT: 

F - False   
T - True   

un          pwd        result
------------------------------
F(<10)      F(<8)        Fail
F(<10)      T(=8)        Fail
T(=10)      F(<8)        Fail
T(=10)+V    T(=8)+I      FAIL
T(=10)+I    T(=8)+V/I    FAIL
T(=10)+V    T(=8)+V      PASS
 
REFER DECISION


state transition:
------------------
-> in a single flow the state changes based on input/usertype.
-> test the state changes as expected.

ex: 
1.user login fail attempts reached 5, then his account is locked.
  state changed from ACTIVE ---> BLOCKED.

2.LoggedinUser vs Loggedout user
ex: amazon 
acces product -> both
add to cart -> both
purchase -> only loggedin can purchse.


3.privilaged customer vs normal customer.
ex: featues

4. atm if the atm pin is wrong for 3 times ; then card is blocked

In State Transition technique changes in input conditions change the state of the Application Under Test (AUT). 
This testing technique allows the tester to test the behavior of an AUT. 

The tester can perform this action by entering various input conditions in a sequence. 

In State transition technique, the testing team provides positive as well as negative input test values for evaluating the system behavior.

ex: 1.one person can add only one product during flikart sale.
 

ex: 
enter username correct and password wrong for 5 times then account will be blocked.

Example:

In the following example, if the user enters a valid password in any of the first three attempts the user will be able to log in successfully. If the user enters the invalid password in the first or second try, the user will be prompted to re-enter the password. When the user enters password incorrectly 3rd time, the action has taken, and the account will be blocked.


  
  
  
  

Internationalization  testing:
----------------------------
-> app that supports multi languages.
Test the application to support the page in diff language.
-> currancy change based on nation
-> date + local information has to be tested.







 



 




